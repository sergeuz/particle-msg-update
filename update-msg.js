#!/usr/bin/env node

const printf = require('printf');
const fs = require('fs');
const _ = require('lodash');

// Replaces all printf format specifiers with the string specifier ('%s')
function simplifyFmtStr(fmt) {
  const f = new printf.Formatter(fmt);
  let s = '';
  for (let i = 0; i < f._tokens.length; ++i) { // FIXME
    const t = f._tokens[i];
    if (_.isString(t)) {
      if (t == '%') {
        s += '%%';
      } else {
        s += t;
      }
    } else {
      s += '%s';
    }
  }
  return s;
}

function writeHeader(fd) {
  fs.writeSync(fd, `/* This file was generated by the \`update-msg\` tool. */

#include <stddef.h>

static const struct {
    unsigned id;
    const char* msg;
} log_messages[] = {
`);
}

function writeMsg(fd, id, msg) {
  fs.writeSync(fd, `    { ${id}, "${msg}" },
`);
}

function writeFooter(fd) {
  fs.writeSync(fd, `};

#ifdef __cplusplus
extern "C" {
#endif

const void* _log_message_data = log_messages;
size_t _log_message_data_size = sizeof(log_messages);

#ifdef __cplusplus
} // extern "C"
#endif
`);
}

try {
  // Process arguments
  const srcFile = process.argv[2];
  const destFile = process.argv[3];
  if (_.isUndefined(srcFile)) {
    throw new Error('Source file is not specified');
  }
  if (_.isUndefined(destFile)) {
    throw new Error('Destination file is not specified');
  }
  // Parse source JSON file
  let msgs = JSON.parse(fs.readFileSync(srcFile).toString());
  if (!_.isArray(msgs)) {
    throw new Error('Invalid format of the message data');
  }
  _.forEach(msgs, (m) => {
    if (!_.has(m, 'id') || !_.has(m, 'msg')) {
      throw new Error('Invalid format of the message data');
    }
    // Simplify a printf format string
    m.msg = simplifyFmtStr(m.msg);
  });
  // Sort messages by ID
  msgs = _.sortBy(msgs, (m) => {
    return m.id;
  });
  // Generate destination source file
  const fd = fs.openSync(destFile, 'w');
  writeHeader(fd);
  _.forEach(msgs, (m) => {
    writeMsg(fd, m.id, m.msg);
  });
  writeFooter(fd);
  fs.closeSync(fd);
} catch (e) {
  console.error(`Error: ${e.message}`);
  process.exit(1);
}
